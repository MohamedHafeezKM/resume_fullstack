{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/storage.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction HomeComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"label\", 5);\n    i0.ɵɵtext(2, \"Upload resume:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 6);\n    i0.ɵɵelementStart(4, \"div\", 7)(5, \"button\", 8);\n    i0.ɵɵtext(6, \"Upload\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nexport class HomeComponent {\n  constructor(service, router) {\n    this.service = service;\n    this.router = router;\n    this.isUploadedAlready = false;\n    this.resumeForm = new FormGroup({\n      resume: new FormControl(\"\", Validators.required)\n    });\n    // service.isResumealreadyUploaded().subscribe(data=>{\n    //    this.isUploadedAlready=true\n    // })\n  }\n\n  upload() {\n    const formData = new FormData();\n    const resumeFile = this.resumeForm.controls['resume'].value;\n    formData.append('resume', resumeFile);\n    this.service.uploadResume(formData).subscribe(result => {\n      console.log(result);\n    });\n  }\n  Upload() {\n    let data = this.resumeForm.value;\n    this.service.uploadResume(data).subscribe(result => {\n      alert('You resume succefully uploaded');\n      this.isUploadedAlready = true, error => {\n        console.log(error);\n      };\n    });\n  }\n  signOut() {\n    localStorage.removeItem('token');\n    this.router.navigateByUrl('login');\n  }\n  static #_ = this.ɵfac = function HomeComponent_Factory(t) {\n    return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.StorageService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomeComponent,\n    selectors: [[\"app-home\"]],\n    decls: 6,\n    vars: 1,\n    consts: [[1, \"container\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"row\"], [\"class\", \"col-lg-6 col-12 mt-5\", 4, \"ngIf\"], [1, \"col-lg-6\", \"col-12\", \"mt-5\"], [\"for\", \"a\"], [\"type\", \"file\", \"id\", \"a\", 1, \"form-control\"], [1, \"d-grid\", \"gap-2\", \"mt-5\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"nav\")(2, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_2_listener() {\n          return ctx.signOut();\n        });\n        i0.ɵɵtext(3, \"Sign out\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 2);\n        i0.ɵɵtemplate(5, HomeComponent_div_5_Template, 7, 0, \"div\", 3);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.isUploadedAlready == false);\n      }\n    },\n    dependencies: [i3.NgIf],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FormControl","FormGroup","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","HomeComponent","constructor","service","router","isUploadedAlready","resumeForm","resume","required","upload","formData","FormData","resumeFile","controls","value","append","uploadResume","subscribe","result","console","log","Upload","data","alert","error","signOut","localStorage","removeItem","navigateByUrl","_","ɵɵdirectiveInject","i1","StorageService","i2","Router","_2","selectors","decls","vars","consts","template","HomeComponent_Template","rf","ctx","ɵɵlistener","HomeComponent_Template_button_click_2_listener","ɵɵtemplate","HomeComponent_div_5_Template","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\Hafeez\\Desktop\\resume\\frontEnd\\src\\app\\home\\home.component.ts","C:\\Users\\Hafeez\\Desktop\\resume\\frontEnd\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport {FormControl,FormGroup,Validators} from '@angular/forms'\nimport { StorageService } from '../service/storage.service';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n  isUploadedAlready:boolean=false\n  constructor(private service:StorageService,private router:Router){\n  // service.isResumealreadyUploaded().subscribe(data=>{\n  //    this.isUploadedAlready=true\n  // })\n  }\n\n \n\n  resumeForm=new FormGroup({\n    resume:new FormControl(\"\",Validators.required)\n  })\n  upload(){\n    const formData = new FormData();\n    const resumeFile=this.resumeForm.controls['resume'].value\n  \n    formData.append('resume',resumeFile);\n  \n  this.service.uploadResume(formData).subscribe((result: any) => {\n      console.log(result);\n  });\n   }\n  \n\n  Upload(){\n    \n    let data=this.resumeForm.value\n    this.service.uploadResume(data).subscribe((result:any)=>{\n      alert('You resume succefully uploaded')\n      this.isUploadedAlready=true\n      ,\n      (error:any)=>{console.log(error);\n      }\n\n    })\n\n    \n  }\n\n  signOut(){\n    localStorage.removeItem('token')\n    this.router.navigateByUrl('login')\n  }\n \n\n}\n","<div class=\"container\">\n    <nav>\n        <button (click)=\"signOut()\" class=\"btn btn-primary\">Sign out</button>\n    </nav>\n    <div class=\"row\">\n        <div *ngIf=\"isUploadedAlready==false\"  class=\"col-lg-6 col-12 mt-5\">\n            <!-- <form [formGroup]=\"resumeForm\" enctype=\"multipart/form-data\" (ngSubmit)=\"upload()\" > -->\n            <label for=\"a\">Upload resume:</label>\n            <input   type=\"file\" id=\"a\" class=\"form-control\">\n            <div class=\"d-grid gap-2 mt-5\">\n                <button type=\"submit\" class=\"btn btn-primary\">Upload</button>\n            </div>\n        <!-- </form> -->\n        </div>\n    </div>\n</div>\n\n"],"mappings":"AACA,SAAQA,WAAW,EAACC,SAAS,EAACC,UAAU,QAAO,gBAAgB;;;;;;;ICIvDC,EAAA,CAAAC,cAAA,aAAoE;IAEjDD,EAAA,CAAAE,MAAA,qBAAc;IAAAF,EAAA,CAAAG,YAAA,EAAQ;IACrCH,EAAA,CAAAI,SAAA,eAAiD;IACjDJ,EAAA,CAAAC,cAAA,aAA+B;IACmBD,EAAA,CAAAE,MAAA,aAAM;IAAAF,EAAA,CAAAG,YAAA,EAAS;;;ADC7E,OAAM,MAAOE,aAAa;EAExBC,YAAoBC,OAAsB,EAASC,MAAa;IAA5C,KAAAD,OAAO,GAAPA,OAAO;IAAwB,KAAAC,MAAM,GAANA,MAAM;IADzD,KAAAC,iBAAiB,GAAS,KAAK;IAS/B,KAAAC,UAAU,GAAC,IAAIZ,SAAS,CAAC;MACvBa,MAAM,EAAC,IAAId,WAAW,CAAC,EAAE,EAACE,UAAU,CAACa,QAAQ;KAC9C,CAAC;IATF;IACA;IACA;EACA;;EAOAC,MAAMA,CAAA;IACJ,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,MAAMC,UAAU,GAAC,IAAI,CAACN,UAAU,CAACO,QAAQ,CAAC,QAAQ,CAAC,CAACC,KAAK;IAEzDJ,QAAQ,CAACK,MAAM,CAAC,QAAQ,EAACH,UAAU,CAAC;IAEtC,IAAI,CAACT,OAAO,CAACa,YAAY,CAACN,QAAQ,CAAC,CAACO,SAAS,CAAEC,MAAW,IAAI;MAC1DC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACvB,CAAC,CAAC;EACD;EAGDG,MAAMA,CAAA;IAEJ,IAAIC,IAAI,GAAC,IAAI,CAAChB,UAAU,CAACQ,KAAK;IAC9B,IAAI,CAACX,OAAO,CAACa,YAAY,CAACM,IAAI,CAAC,CAACL,SAAS,CAAEC,MAAU,IAAG;MACtDK,KAAK,CAAC,gCAAgC,CAAC;MACvC,IAAI,CAAClB,iBAAiB,GAAC,IAAI,EAE1BmB,KAAS,IAAG;QAACL,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;MAChC,CAAC;IAEH,CAAC,CAAC;EAGJ;EAEAC,OAAOA,CAAA;IACLC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACvB,MAAM,CAACwB,aAAa,CAAC,OAAO,CAAC;EACpC;EAAC,QAAAC,CAAA,G;qBA3CU5B,aAAa,EAAAL,EAAA,CAAAkC,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAApC,EAAA,CAAAkC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAblC,aAAa;IAAAmC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,uBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCX1B9C,EAAA,CAAAC,cAAA,aAAuB;QAEPD,EAAA,CAAAgD,UAAA,mBAAAC,+CAAA;UAAA,OAASF,GAAA,CAAAlB,OAAA,EAAS;QAAA,EAAC;QAAyB7B,EAAA,CAAAE,MAAA,eAAQ;QAAAF,EAAA,CAAAG,YAAA,EAAS;QAEzEH,EAAA,CAAAC,cAAA,aAAiB;QACbD,EAAA,CAAAkD,UAAA,IAAAC,4BAAA,iBAQM;QACVnD,EAAA,CAAAG,YAAA,EAAM;;;QATIH,EAAA,CAAAoD,SAAA,GAA8B;QAA9BpD,EAAA,CAAAqD,UAAA,SAAAN,GAAA,CAAAtC,iBAAA,UAA8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}